Шаблон: Прокси (Proxy)
========================================================================================================================
Цель:

Для замещения другого объекта и контроля доступа к нему.
========================================================================================================================
Для чего используется:

Для обеспечения контроля доступа к определенному объекту.
========================================================================================================================

Пример использования:

- когда есть наобходимость ссылаться на объект способом отличным от обычного указателя;
* удаленное замещение - локальный представитель вместо объекта в другом адресном пространстве.
* виртуальное замещение - создание "тяжелых объектов" при необходимости.
* защищенное замещение - контроль доступа к указанному объекту.
* "умная ссылка" - замена обычного указателя(подсчет числа ссылок, установка блокировки и тд).
========================================================================================================================

Конкретные реализации:
Заместитель (Proxy) - содержит порождающие методы, которые возвращают реализацию определенного типа (класса или интерфейса),
который, в свою очередь, делегирует или использует другую реализацию.
Иначе говоря, контролирует доступ к другому объекту, перехватывая все вызовы (выполняет функцию контейнера).
- java.lang.reflect.Proxy
- java.rmi.*, все API построено на этом принципе.
========================================================================================================================
Description Proxy:
In proxy pattern, a class represents functionality of another class.
This type of design pattern comes under structural pattern.
In proxy pattern, we create object having original object to interface its functionality to outer world.

Simply, proxy means an object representing another object.
According to GoF, a Proxy Pattern "provides the control for accessing the original object".
So, we can perform many operations like hiding the information of original object, on demand loading etc.
Proxy pattern is also known as Surrogate or Placeholder.


Advantage of Proxy Pattern:
It provides the protection to the original object from the outside world.

Usage of Proxy Pattern:
1) It can be used in Virtual Proxy scenario---Consider a situation where there is multiple database call to extract
huge size image. Since this is an expensive operation so here we can use the proxy pattern
which would create multiple proxies and point to the huge size memory consuming object for further processing.
The real object gets created only when a client first requests/accesses the object and after that
we can just refer to the proxy to reuse the object. This avoids duplication of the object and hence saving memory.
2) It can be used in Protective Proxy scenario---It acts as an authorization layer to verify that
whether the actual user has access the appropriate content or not.
For example, a proxy server which provides restriction on internet access in office.
Only the websites and contents which are valid will be allowed and the remaining ones will be blocked.
3) It can be used in Remote Proxy scenario---A remote proxy can be thought about the stub in the RPC call.
The remote proxy provides a local representation of the object which is present in the different address location.
Another example can be providing interface for remote resources such as web service or REST resources.
4) It can be used in Smart Proxy scenario---A smart proxy provides additional layer of security by interposing
specific actions when the object is accessed.
For example, to check whether the real object is locked or not before accessing it so that no other objects can change it.