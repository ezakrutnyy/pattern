Шаблон: Декоратор (Decorator)
========================================================================================================================
Цель:

Динамическое добавление новых обязанностей объекту.
========================================================================================================================
Для чего используется:

Используется в качестве альтернативы порождению подклассов для расширения функциональности.
========================================================================================================================

Пример использования:

- динамическое и понятное клиенту добавления новых обязанностей объектам;
- реализация обязанностей, которые могут быть сняты с объектов;
- расширение класса путем порождения подклассов невозможно по каким либо причинам.

========================================================================================================================

Конкретные реализации:
Декоратор (Decorator) - содержит порождающие методы, которые принимают в качестве параметра экземпляр одного типа
и добавляют дополнительный функционал (дополнительное поведение)

- Все подклассы of java.io.InputStream, OutputStream, Reader and Writer имеют конструкторы того же типа.
- java.util.Collections, методы the checkedXXX(), synchronizedXXX() и unmodifiableXXX().
- javax.servlet.http.HttpServletRequestWrapper и HttpServletResponseWrapper
========================================================================================================================

Decorator Pattern

A Decorator Pattern says that just "attach a flexible additional responsibilities to an object dynamically".
In other words, The Decorator Pattern uses composition instead of inheritance to extend the functionality of an object
at runtime.
The Decorator Pattern is also known as Wrapper.

Advantage of Decorator Pattern

1) It provides greater flexibility than static inheritance.
2) It enhances the extensibility of the object, because changes are made by coding new classes.
3) It simplifies the coding by allowing you to develop a series of functionality from targeted classes
instead of coding all of the behavior into the object.

Usage of Decorator Pattern

It is used:

1) When you want to transparently and dynamically add responsibilities to objects without affecting other objects.
2) When you want to add responsibilities to an object that you may want to change in future.
3) Extending functionality by sub-classing is no longer practical.




