Шаблон: Итератор (Iterator)
========================================================================================================================
Цель:

Получение последовательного доступа ко всем элементам составного объекта.
========================================================================================================================
Для чего используется:

Для получения последовательного доступа ко всем элементам составного объекта, скрывая его внутреннее представление.
========================================================================================================================
Пример использования:

- различные виды обхода составного объекта;
- упрощенный доступ к составному объекту.
========================================================================================================================

Конкретные реализации:

Итератор (Iterator) - содержит методы, которые возвращают объекты из очереди
- Реализации java.util.Iterator
- Реализации java.util.Enumeration
========================================================================================================================

Iterator pattern:

Iterator pattern is very commonly used design pattern in Java and .Net programming environment.
This pattern is used to get a way to access the elements of a collection object in sequential manner without
any need to know its underlying representation.
Iterator pattern falls under behavioral pattern category.

Advantage of Iterator Pattern:

1) It supports variations in the traversal of a collection.
2) It simplifies the interface to the collection.

Usage of Iterator Pattern:

It is used:

1) When you want to access a collection of objects without exposing its internal representation.
2) When there are multiple traversals of objects need to be supported in the collection.